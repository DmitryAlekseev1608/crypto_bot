package task

import (
	"crypto_pro/internal/adapters"
	"crypto_pro/internal/controller"
	"crypto_pro/internal/domain/entity"
	"crypto_pro/internal/domain/usecase"
	"crypto_pro/pkg/logger"
	"fmt"
	"strconv"
	"strings"
)

var _ usecase.TaskUseCase = (*TaskUseCase)(nil)

type TaskUseCase struct {
	log              logger.Logger
	serverController controller.Server
	dbAdapter        adapters.DbAdapter
}

func New(log logger.Logger, serverController controller.Server, dbAdapter adapters.DbAdapter,
) TaskUseCase {
	return TaskUseCase{log: log, serverController: serverController, dbAdapter: dbAdapter}
}

func (b TaskUseCase) HandleRequest(requestIn, id string) []entity.Transaction {
	usdt, spreadMin, spreadMax := b.getDataIn(requestIn)
	transactions := b.serverController.GetSpotHandler(usdt, spreadMin, spreadMax)
	for i := range transactions {
		transactions[i].SetID(id)
	}

	if len(transactions) == 0 {
		return nil
	}

	err := b.dbAdapter.UpsertDWHTransactions(transactions)
	if err != nil {
		b.log.Error("Error when upserting transactions: %v", b.log.ErrorC(err))
		return nil
	}

	newTransactions := b.dbAdapter.SelectNewTransactions(id)
	if newTransactions == nil {
		return []entity.Transaction{}
	}

	return newTransactions
}

func (b TaskUseCase) GetAllTransactions(id string) []entity.Transaction {
	transactions := b.dbAdapter.SelectTransactions(id)
	if transactions == nil {
		return []entity.Transaction{}
	}
	return transactions
}

func (b TaskUseCase) getDataIn(input string) (float64, float64, float64) {
	parts := strings.Split(input, " ")
	usdt, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		b.log.Error("Error when transforming usdt '%s': %v", b.log.ErrorC(err), b.log.StringC("input",
			input))
	}
	spreadMin, err := strconv.ParseFloat(parts[1], 64)
	if err != nil {
		b.log.Error("Error when transforming spreadMin '%s': %v", b.log.ErrorC(err), b.log.StringC("input",
			input))
	}
	spreadMax, err := strconv.ParseFloat(parts[2], 64)
	if err != nil {
		b.log.Error("Error when transforming spreadMax '%s': %v", b.log.ErrorC(err), b.log.StringC("input",
			input))
	}
	return usdt, spreadMin, spreadMax
}

func (b TaskUseCase) DeleteSession(id string) {
	b.dbAdapter.DeleteSession(id)
}

func (b TaskUseCase) TrancateRawTransactions() {
	b.dbAdapter.TrancateRawTransactions()
}

func (b TaskUseCase) TrancateDwhTransactions() {
	b.dbAdapter.TrancateDwhTransactions()
}

func (b TaskUseCase) GetTransactions(id string) []entity.Transaction {
	return b.dbAdapter.SelectTransactions(id)
}

func (b TaskUseCase) GetInstruction() string {
	return `–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –±–∏—Ä–∂–µ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ CryptoPro.	–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏—Ä–∂–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å. –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∏—Ä–∂–∞–º–∏:
	- ASCENDEX;
	- BINGX;
	- BITGET;
	- BITMART;
	- BYBIT;
	- HTX;
	- KUKOIN;
	- MEXC;
	- XT.
–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Å—É–º–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ USDT (—Ü–µ–ª–æ–µ), spread_min, spread_max (–¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π) –≤ % —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø—Ä–∏–º–µ—Ä 100 0.3 0.5), —á—Ç–æ–±—ã —è –º–æ–≥ –∏—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏—Ä–∂ –æ—Ç–ø—Ä–∞–≤—å stop –≤ —á–∞—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Å–¥–µ–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å all, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—Ä–∞–∑—É.`
}

func (b TaskUseCase) GetInfoAboutTransactions(id string, marketFrom, marketTo, symbol string,
) string {

	transaction := b.dbAdapter.SelectTransactionsBySymbol(id, symbol, marketFrom, marketTo)
	if transaction.ID == "" {
		return "–æ–π, üòÄ —Å–¥–µ–ª–∫–∞ —É–∂–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è —Ç–µ–±—è"
	}
	msgContent := fmt.Sprintf("%v \n", transaction.Symbol)
	msgContent += fmt.Sprintf("üìï|%v| \n", transaction.MarketFrom)
	msgContent += fmt.Sprintf("*–°–µ—Ç—å:* %v \n", transaction.Chain)
	msgContent += fmt.Sprintf("*–û–±—ä–µ–º –±/–∫:* %.4f %v \n", transaction.AmountCoin, transaction.Symbol)
	msgContent += fmt.Sprintf("*–ö–æ–º–∏—Å—Å–∏—è:* %v %v \n", transaction.WithDrawFee, transaction.Symbol)
	msgContent += fmt.Sprintf("*–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤:* %v \n", transaction.AmountAskOrder)
	msgContent += fmt.Sprintf("*–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:* %.0f USDT \n", transaction.AskCost)
	msgContent += fmt.Sprintf("*–û—Ä–¥–µ—Ä–∞ (–¶–µ–Ω–∞/–ö–æ–ª-–≤–æ):* %v \n", transaction.AskOrder)
	msgContent += fmt.Sprintf("üìó|%v| \n", transaction.MarketTo)
	msgContent += fmt.Sprintf("*–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤:* %v \n", transaction.AmountBidOrder)
	msgContent += fmt.Sprintf("*–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:* %.2f USDT \n", transaction.BidCost)
	msgContent += fmt.Sprintf("*–û—Ä–¥–µ—Ä–∞ (–¶–µ–Ω–∞/–ö–æ–ª-–≤–æ):* %v \n", transaction.BidOrder)
	msgContent += "--- \n"
	msgContent += fmt.Sprintf("üí∞ *–°–ø—Ä–µ–¥:* %.2f %%", transaction.Spread)
	return msgContent
}

func (b TaskUseCase) CreateSession(id, requestIn string) {
	usdt, spreadMin, spreadMax := b.getDataIn(requestIn)
	b.dbAdapter.CreateSession(id, usdt, spreadMin, spreadMax)
}
