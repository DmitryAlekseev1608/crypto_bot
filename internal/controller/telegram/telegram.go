package telegram

import (
	"context"
	"crypto_pro/internal/domain/usecase"
	"crypto_pro/pkg/logger"
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramController struct {
	log         logger.Logger
	bot         *tgbotapi.BotAPI
	taskUseCase usecase.TaskUseCase
	infoUseCase usecase.InfoUseCase
}

func New(log logger.Logger, taskUseCase usecase.TaskUseCase, infoUseCase usecase.InfoUseCase) TelegramController {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_APITOKEN"))
	if err != nil {
		panic(err)
	}
	bot.Debug = true
	log.Info("Authorized on account", log.StringC("UserName", bot.Self.UserName))
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	return TelegramController{log: log, bot: bot, taskUseCase: taskUseCase, infoUseCase: infoUseCase}
}

func (t TelegramController) Run(ctx context.Context) {
	var activeSessions = make(map[int64]context.CancelFunc)
	updates := t.bot.GetUpdatesChan(tgbotapi.NewUpdate(0))
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
		),
	)
	re := regexp.MustCompile(`^\d+\s\d+(\.\d+)?$`)
	semathore := make(chan struct{}, 30)
	defer close(semathore)
	t.taskUseCase.TrancateRawTransactions()
	t.taskUseCase.TrancateDwhTransactions()

	for update := range updates {
		if update.Message != nil {
			t.log.Info("Received message", t.log.StringC("Message", update.Message.Text),
				t.log.Int64C("ChatID", update.Message.Chat.ID), t.log.IntC("Semaphore", len(semathore)))
			if _, exists := activeSessions[update.Message.Chat.ID]; exists {
				t.sendMessage("–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞", update, keyboard)
				continue
			}

			switch {
			case update.Message.Text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
				t.sendMessage(t.getInstruction(), update, keyboard)
			case re.MatchString(update.Message.Text):
				ctx, cancel := context.WithCancel(context.Background())
				activeSessions[update.Message.Chat.ID] = cancel
				go func() {
					semathore <- struct{}{}
					defer func() { <-semathore }()
					for {
						select {
						case <-ctx.Done():
							return
						default:
							t.handleRequest(update.Message)
						}
					}
				}()
				t.sendMessage("–°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 's' –¥–ª—è –æ—Ç–º–µ–Ω—ã.", update, keyboard)

			case update.Message.Text == "s":
				if cancel, exists := activeSessions[update.Message.Chat.ID]; exists {
					cancel()
					delete(activeSessions, update.Message.Chat.ID)
					t.taskUseCase.DeleteSession(update.Message.Chat.ID)
					t.sendMessage("–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", update, keyboard)
				} else {
					t.sendMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.", update, keyboard)
				}

			default:
				t.sendMessage("–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–æ–º –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –∏–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ", update, keyboard)
			}

		} else if update.CallbackQuery != nil {
			t.sendInfo(update.CallbackQuery)
		}
	}
}

func (t TelegramController) getInstruction() string {
	return `
–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –±–∏—Ä–∂–µ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ CryptoPro. –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏—Ä–∂–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è
—Å–ø–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂. –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å. –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –±–∏—Ä–∂–∞–º–∏ BYBIT –∏ KUKOIN. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Å—É–º–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ
–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ USDT (—Ü–µ–ª–æ–µ) –∏ spread (–¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π) –≤ % —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä 100 0.3), —á—Ç–æ–±—ã —è –º–æ–≥ –∏—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏—Ä–∂ –æ—Ç–ø—Ä–∞–≤—å s –≤ —á–∞—Ç –∏ —Å–º–æ—Ç—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Å–¥–µ–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å
–≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π.
`
}

func (t TelegramController) sendMessage(text string, update tgbotapi.Update,
	keyboard tgbotapi.ReplyKeyboardMarkup) {

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	t.bot.Send(msg)
}

func (t TelegramController) handleRequest(update *tgbotapi.Message) {
	transactions := t.taskUseCase.HandleRequest(update.Text)
	buttons := []tgbotapi.InlineKeyboardButton{}

	for _, transaction := range transactions {
		textOnButton := fmt.Sprintf("%v: %.2f (%.2f%%) üü¢", transaction.Symbol,
			transaction.AmountCoin, transaction.Spread)
		keyMsg := strconv.FormatInt(update.Chat.ID, 10) + "/" + transaction.MarketFrom + "/" +
			transaction.MarketTo + "/" + transaction.Symbol
		button := tgbotapi.NewInlineKeyboardButtonData(textOnButton, keyMsg)
		buttons = append(buttons, button)
	}
	inlineKeyboard := t.createInlineKeyboard(buttons)
	msg := tgbotapi.NewMessage(update.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –í–∞–º —Å–¥–µ–ª–∫—É:")
	msg.ReplyMarkup = inlineKeyboard
	t.bot.Send(msg)
}

func (t TelegramController) createInlineKeyboard(buttons []tgbotapi.InlineKeyboardButton
	) tgbotapi.InlineKeyboardMarkup {

	var rows [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton
	for _, button := range buttons {
		row = append(row, button)
		rows = append(rows, row)
		row = nil
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func (t TelegramController) sendInfo(update *tgbotapi.CallbackQuery) {
	callbackQuery := update.CallbackQuery
	logger.Infof("User pressed: %v", callbackQuery.Data)
	





	dataFromRedis := t.redis.GetOrder(1, callbackQuery.Data)
	var dataForClient redis.ClientInfoVal
	err := json.Unmarshal([]byte(dataFromRedis), &dataForClient)
	if err != nil {
		logger.Warnf("Error for unmarshal JSON: %v", err)
	}
	if dataForClient.WithDrawFee != 0 {
		textWithDeal := fmt.Sprintf("%v \n", dataForClient.Symbol)
		textWithDeal += fmt.Sprintf("üìï|%v| \n", dataForClient.MarketFrom)
		textWithDeal += fmt.Sprintf("–ö–æ–º–∏—Å—Å–∏—è: %v %v \n", dataForClient.WithDrawFee, dataForClient.Symbol)
		textWithDeal += fmt.Sprintf("–û–±—ä–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π: %v %v \n", dataForClient.WithdrawMax, dataForClient.Symbol)
		textWithDeal += fmt.Sprintf("–°–µ—Ç—å: %v \n", dataForClient.Chain)
		textWithDeal += fmt.Sprintf("–û–±—ä–µ–º: %.4f %v \n", dataForClient.AmountCoin, dataForClient.Symbol)
		textWithDeal += fmt.Sprintf("–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: %v \n", dataForClient.AmountAskOrder)
		textWithDeal += fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f USDT \n", dataForClient.AskCost)
		textWithDeal += fmt.Sprintf("–û—Ä–¥–µ—Ä–∞ (–¶–µ–Ω–∞/–ö–æ–ª-–≤–æ): %v \n", dataForClient.AskOrder)
		textWithDeal += fmt.Sprintf("üìó|%v| \n", dataForClient.MarketTo)
		textWithDeal += fmt.Sprintf("–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: %v \n", dataForClient.AmountBidOrder)
		textWithDeal += fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f USDT \n", dataForClient.BidCost)
		textWithDeal += fmt.Sprintf("–û—Ä–¥–µ—Ä–∞ (–¶–µ–Ω–∞/–ö–æ–ª-–≤–æ): %v \n", dataForClient.BidOrder)
		textWithDeal += "--- \n"
		textWithDeal += fmt.Sprintf("üí∞ –°–ø—Ä–µ–¥: %.2f %%", dataForClient.Spread)
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, textWithDeal)
		t.bot.Send(msg)
}
}