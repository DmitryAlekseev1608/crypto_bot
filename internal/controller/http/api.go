// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GetSpotParams defines parameters for GetSpot.
type GetSpotParams struct {
	// Usdt maximum number of USDT
	Usdt float32 `form:"usdt" json:"usdt"`

	// SpreadMin minimum spread of deal
	SpreadMin float32 `form:"spread_min" json:"spread_min"`

	// SpreadMax maximum spread of deal
	SpreadMax float32 `form:"spread_max" json:"spread_max"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// transaction
	// (GET /spot)
	GetSpot(ctx echo.Context, params GetSpotParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpot converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpot(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSpotParams
	// ------------- Required query parameter "usdt" -------------

	err = runtime.BindQueryParameter("form", true, true, "usdt", ctx.QueryParams(), &params.Usdt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usdt: %s", err))
	}

	// ------------- Required query parameter "spread_min" -------------

	err = runtime.BindQueryParameter("form", true, true, "spread_min", ctx.QueryParams(), &params.SpreadMin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spread_min: %s", err))
	}

	// ------------- Required query parameter "spread_max" -------------

	err = runtime.BindQueryParameter("form", true, true, "spread_max", ctx.QueryParams(), &params.SpreadMax)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spread_max: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSpot(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/spot", wrapper.GetSpot)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVX0/bThD8KtY+W8nl91Olym+lRRVCBamESlWFrI29SY7k/rC3BiKU716tDW1iXAh9",
	"6lMudzOzc7d34wewfh6geICaUsU2ig0eCliQZDUKZnMOLnPIK5Lszsoym1GSTBh9wqoF5yBW1gQFfD2+",
	"mGaJ+JY4mwfOUoW6fEucOtXJyIwMbHMIkTxGCwX8PzKjCeQQUZZJfYxTDKKDBcmwrwEHIRKjjk9qKOAz",
	"yYWKqCqjIyFOUPzoazm8t65xmW/cjDgL8+zy4tMUcrC6etMQbyAHj0731qRaBZluGstUQyHcUA6pWpJD",
	"9Un36KIew8QYk4NsotI6bdhu82fVrW+rp8iEtVavCdd/qN6BSmf9gR4OMfC4/TcZwPvDDLx7buBKiSkG",
	"n6ht9H/G6E8VvJBvW40xrm3V9nF8ndTkw462FXItMbK2W2wn8yGtzrkmfgES2Va0Z8+MnhvM4aaUTb+V",
	"Awf5NBNm11QJ/J5AZtzo/yNb/3Oe0IXGS4lpVYYnbzuiA6UfGTNbv5FRBev3b4MZRKdVWYUkr24vB/Vw",
	"ILRaYq86fDs+O/8Cv7BJ2PqFYrtcKzXj9hlH349Opi8wJOzjTy9Pz0/Ohgjdw3nlceaQNm4W1j0T049D",
	"iprCZc14V86pf4OMGRJXRkvQ5/tqVO3ieyc5+Yubp5D94GG7WEr2lAWtRmqcQ95AAbu53nK770mX3w2v",
	"oYClSCzG426heG+Mge3V9mcAAAD///fIr83KBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
